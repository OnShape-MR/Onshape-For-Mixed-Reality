using System;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Model {

  /// <summary>
  /// 
  /// </summary>
  [DataContract]
  public class BlobElementsUploadFileCreateElementResponse200 {
    /// <summary>
    /// Onshape internal use
    /// </summary>
    /// <value>Onshape internal use</value>
    [DataMember(Name="angleUnits", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "angleUnits")]
    public string AngleUnits { get; set; }

    /// <summary>
    /// Name of element
    /// </summary>
    /// <value>Name of element</value>
    [DataMember(Name="name", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "name")]
    public string Name { get; set; }

    /// <summary>
    /// The id of the translation request generated by the upload if the             request indicated that the file should be translated
    /// </summary>
    /// <value>The id of the translation request generated by the upload if the             request indicated that the file should be translated</value>
    [DataMember(Name="translationId", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "translationId")]
    public string TranslationId { get; set; }

    /// <summary>
    /// MIME type of uploaded file
    /// </summary>
    /// <value>MIME type of uploaded file</value>
    [DataMember(Name="dataType", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "dataType")]
    public string DataType { get; set; }

    /// <summary>
    /// Onshape internal use
    /// </summary>
    /// <value>Onshape internal use</value>
    [DataMember(Name="translationEventKey", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "translationEventKey")]
    public string TranslationEventKey { get; set; }

    /// <summary>
    /// Onshape internal use
    /// </summary>
    /// <value>Onshape internal use</value>
    [DataMember(Name="filename", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "filename")]
    public string Filename { get; set; }

    /// <summary>
    /// Onshape internal use
    /// </summary>
    /// <value>Onshape internal use</value>
    [DataMember(Name="foreignDataId", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "foreignDataId")]
    public string ForeignDataId { get; set; }

    /// <summary>
    /// Onshape internal use
    /// </summary>
    /// <value>Onshape internal use</value>
    [DataMember(Name="lengthUnits", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "lengthUnits")]
    public string LengthUnits { get; set; }

    /// <summary>
    /// Type of element (always \"BLOB\" for blob elements)
    /// </summary>
    /// <value>Type of element (always \"BLOB\" for blob elements)</value>
    [DataMember(Name="elementType", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "elementType")]
    public string ElementType { get; set; }

    /// <summary>
    /// Element ID of created element
    /// </summary>
    /// <value>Element ID of created element</value>
    [DataMember(Name="id", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "id")]
    public string Id { get; set; }

    /// <summary>
    /// Onshape internal use
    /// </summary>
    /// <value>Onshape internal use</value>
    [DataMember(Name="thumbnails", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "thumbnails")]
    public string Thumbnails { get; set; }


    /// <summary>
    /// Get the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()  {
      var sb = new StringBuilder();
      sb.Append("class BlobElementsUploadFileCreateElementResponse200 {\n");
      sb.Append("  AngleUnits: ").Append(AngleUnits).Append("\n");
      sb.Append("  Name: ").Append(Name).Append("\n");
      sb.Append("  TranslationId: ").Append(TranslationId).Append("\n");
      sb.Append("  DataType: ").Append(DataType).Append("\n");
      sb.Append("  TranslationEventKey: ").Append(TranslationEventKey).Append("\n");
      sb.Append("  Filename: ").Append(Filename).Append("\n");
      sb.Append("  ForeignDataId: ").Append(ForeignDataId).Append("\n");
      sb.Append("  LengthUnits: ").Append(LengthUnits).Append("\n");
      sb.Append("  ElementType: ").Append(ElementType).Append("\n");
      sb.Append("  Id: ").Append(Id).Append("\n");
      sb.Append("  Thumbnails: ").Append(Thumbnails).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Get the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson() {
      return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

}
}
